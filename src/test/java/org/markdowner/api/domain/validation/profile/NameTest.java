package org.markdowner.api.domain.validation.profile;

import static org.assertj.core.api.Assertions.assertThat;
import static org.junit.jupiter.api.Assertions.assertThrows;

import java.util.List;
import java.util.stream.Stream;

import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;
import org.springframework.boot.test.context.SpringBootTest;

import jakarta.validation.ConstraintViolation;
import jakarta.validation.ConstraintViolationException;

@SpringBootTest
public class NameTest {

    private static Stream<Arguments> invalidNameProvider() {
        return Stream.of(
                Arguments.of("Nome: n√∫mero no valor", "Jo√£o123"),
                Arguments.of("Nome: caractere inv√°lido '!'", "Maria!"),
                Arguments.of("Nome: caractere inv√°lido '@'", "Jos√©@Silva"),
                Arguments.of("Nome: caractere inv√°lido '_'", "Ana_Souza"),
                Arguments.of("Nome: espa√ßo no in√≠cio", " Jo√£o"),
                Arguments.of("Nome: espa√ßo no final", "Maria "),
                Arguments.of("Nome: dois espa√ßos consecutivos", "Jo√£o  Silva"),
                Arguments.of("Nome: dois h√≠fens consecutivos", "Ana--Clara"),
                Arguments.of("Nome: dois ap√≥strofos consecutivos", "O''Neill"),
                Arguments.of("Nome: h√≠fen no final", "Pedro-"),
                Arguments.of("Nome: ap√≥strofo no final", "Luiz'"),
                Arguments.of("Nome: espa√ßo no final", "Ana "),
                Arguments.of("Nome: string vazia", ""),
                Arguments.of("Nome: apenas espa√ßo", " "),
                Arguments.of("Nome: apenas h√≠fen", "-"),
                Arguments.of("Nome: apenas ap√≥strofo", "'"),
                Arguments.of("Nome: letra fora do intervalo permitido (estilizada)", "ùìôùì∏ùìº√©"),
                Arguments.of("Nome: letra fora do intervalo permitido (turca)", "ƒ∞lker"),
                Arguments.of("Nome: letra fora do intervalo permitido (polonesa)", "≈Åukasz"),
                Arguments.of("Nome: ponto antes de leta", ".Pedro Alvares Cabral"),
                Arguments.of("Nome: ponto entre espa√ßos", "Pedro . Alvares Cabral"),
                Arguments.of("Nome: ponto ap√≥s espa√ßo", "Pedro .Alvares Cabral"));
    }

    @ParameterizedTest(name = "{0}")
    @MethodSource("invalidNameProvider")
    @DisplayName("Valida√ß√£o do campo Name - casos inv√°lidos")
    public void shouldRejectInvalidEmailsTest(final String description, final String name) {
        final var validations = assertThrows(ConstraintViolationException.class, () -> {
            Name.Validation.validate(name);
        }, description).getConstraintViolations().stream().map(ConstraintViolation::getMessage);
        final var expected = List.of("must be a well-formed name");
        assertThat(validations).isEqualTo(expected).as(description);
    }

    @Test
    @DisplayName("Valida√ß√£o do campo de name - caso v√°lido")
    public void shouldAcceptValidNamesTest() {
        final var name = "P. Dias-D'√Åvila S√£o M.";
        assertThat(Name.Validation.validate(name)).isEqualTo(name);
    }

}
